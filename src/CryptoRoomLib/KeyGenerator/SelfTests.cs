using CryptoRoomLib.Cipher3412;
using CryptoRoomLib.CipherMode3413;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CryptoRoomLib.KeyGenerator
{
    /// <summary>
    /// Набор встроенных тестов для проверки правильности алгоритма.
    /// </summary>
    public class SelfTests : SelfTestsBase
    {
        public SelfTests()
        {
            AppendFunc(CryptEcSecretKeyTest);
            AppendFunc(HashSecretKeyTest);
        }


        /// <summary>
        /// Тестирует корректность работы алгоритма хеширования пароля.
        /// </summary>
        /// <returns></returns>
        private bool HashSecretKeyTest()
        {
            //Соль 17 байт.
            byte[] salt = new byte[]
            {
                0x10, 0xea, 0x2c, 0x88, 0x25, 0x96, 0xf3, 0x12,
                0x55, 0xaa, 0xd4, 0xca, 0x5c, 0x58, 0xe7, 0xea,
                0x4d,
            };

            //ТестовыйПароль99EngLater 24символа
            byte[] password = new byte[]
            {
                0xd2, 0xe5, 0xf1, 0xf2, 0xee, 0xe2, 0xfb, 0xe9,
                0xcf, 0xe0, 0xf0, 0xee, 0xeb, 0xfc, 0x39, 0x39,
                0x45, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x72,
            };

            byte[] toHash = new byte[]
            {
                0xd2, 0xe5, 0xf1, 0xf2, 0xee, 0xe2, 0xfb, 0xe9,
                0xcf, 0xe0, 0xf0, 0xee, 0xeb, 0xfc, 0x39, 0x39,
                0x45, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x72,

                0x10, 0xea, 0x2c, 0x88, 0x25, 0x96, 0xf3, 0x12,
                0x55, 0xaa, 0xd4, 0xca, 0x5c, 0x58, 0xe7, 0xea,
                0x4d,
            };

            byte[] etalonResult = new byte[]
            {
                0x51, 0x85, 0x68, 0xec, 0x45, 0xfc, 0x96, 0x2f,
                0xb2, 0x79, 0x2b, 0x65, 0xdf, 0x27, 0x7a, 0xfd,
                0x9f, 0x6e, 0xfc, 0xd7, 0x3f, 0x63, 0x5f, 0x43,
                0xa7, 0xaf, 0xed, 0x7c, 0xaf, 0xef, 0xe7, 0xf2
            };

            var result = new byte[32];

            SecretKeyMaker sm = new SecretKeyMaker();
            sm.HashedPassword(salt, password, result);

            if (!etalonResult.SequenceEqual(result))
            {
                LastError = "HashSecretKeyTest: Ошибка проверки метода хеширования пароля.";
                return false;
            }

            //Пример конвертирования строки с паролем.
            string pswd = "ТестовыйПароль99EngLater";
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            byte[] passwordArray = Encoding.GetEncoding(1251).GetBytes(pswd);

            if (!passwordArray.SequenceEqual(password))
            {
                LastError = "HashSecretKeyTest: Ошибка проверки метода хеширования пароля.";
                return false;
            }
            
            return true;
        }
        
        /// <summary>
        /// Тест. Шифрует секретный ключ проверки подписи  ГОСТ 34.11-2012 на хэши.
        /// </summary>
        /// <returns></returns>
        private bool CryptEcSecretKeyTest()
        {
            //Генерирую вектор инициализации
            byte[] iv = new byte[16]
            {
                0x81, 0x4a, 0x88, 0x25, 0xbd, 0xb2, 0x13, 0x7e,
                0x53, 0xd8, 0x4c, 0x2b, 0x70, 0x53, 0xc1, 0xec
            };

            //Закрытый ключ.
            byte[] sc = new byte[64]
            {
                0x70, 0x02, 0xfa, 0x00, 0x11, 0x72, 0x01, 0x01,
                0x3e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
                0x80, 0xfd, 0xe2, 0x03, 0xe9, 0xab, 0x32, 0x77,
                0x80, 0xe7, 0xbd, 0x00, 0x98, 0x01, 0x00, 0x00,
                0xf0, 0xac, 0x54, 0x24, 0xfe, 0xff, 0xff, 0xff,
                0x04, 0xe7, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x14, 0x7b, 0x35, 0x77,
                0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00
            };

            //Шифрованный на хеши от соли и пароля закрытый ключ.
            byte[] cryptSc = new byte[64]
            {
                0xf3, 0x68, 0x3e, 0x66, 0x53, 0xf6, 0x43, 0xa9,
                0xe8, 0x76, 0x7c, 0x73, 0x0c, 0x42, 0xdb, 0x60,
                0xc0, 0x20, 0x0f, 0x56, 0xa9, 0xf1, 0x9d, 0x51,
                0x88, 0xec, 0x87, 0x07, 0x53, 0xac, 0xfb, 0xb6,
                0x96, 0x0e, 0x53, 0x85, 0x38, 0x20, 0x1c, 0xf6,
                0x32, 0x2e, 0x32, 0x04, 0x4f, 0xb2, 0x07, 0x1c,
                0x2e, 0x82, 0x79, 0x20, 0xb0, 0x0b, 0xa0, 0xda,
                0xa4, 0x53, 0x6b, 0x8a, 0xdf, 0xe7, 0xeb, 0x5d
            };

            byte[] cipherKey = new byte[]
            {
                0x51, 0x85, 0x68, 0xec, 0x45, 0xfc, 0x96, 0x2f,
                0xb2, 0x79, 0x2b, 0x65, 0xdf, 0x27, 0x7a, 0xfd,
                0x9f, 0x6e, 0xfc, 0xd7, 0x3f, 0x63, 0x5f, 0x43,
                0xa7, 0xaf, 0xed, 0x7c, 0xaf, 0xef, 0xe7, 0xf2
            };

            SecretKeyMaker sm = new SecretKeyMaker();
            sm.CryptSecretKey(cipherKey, iv, sc);
            
            if (!cryptSc.SequenceEqual(sc))
            {
                LastError = "CryptEcSecretKeyTest: Ошибка проверки шифрования ключа подписи.";
                return false;
            }

            return true;
        }
    }
}
